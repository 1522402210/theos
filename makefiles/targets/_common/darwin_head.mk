# Variables that are common to all Darwin-based targets.
TARGET_EXE_EXT :=
TARGET_LIB_EXT := .dylib

TARGET_LDFLAGS_DYNAMICLIB = -dynamiclib -install_name "$(LOCAL_INSTALL_PATH)/$(1)"
TARGET_CFLAGS_DYNAMICLIB = 

_THEOS_TARGET_ONLY_OBJCFLAGS := -std=c99

_THEOS_TARGET_SUPPORTS_BUNDLES := 1

_THEOS_TARGET_CC := clang
_THEOS_TARGET_CXX := clang++
_THEOS_TARGET_ARG_ORDER := 1 2
ifeq ($(__THEOS_TARGET_ARG_1),clang)
_THEOS_TARGET_ARG_ORDER := 2 3
else ifeq ($(__THEOS_TARGET_ARG_1),gcc)
_THEOS_TARGET_ARG_ORDER := 2 3
endif

_THEOS_TARGET_DEFAULT_PACKAGE_FORMAT ?= deb

ifeq ($(_THEOS_TARGET_PLATFORM_IS_SIMULATOR),$(_THEOS_TRUE))
_THEOS_TARGET_DEFAULT_USE_SUBSTRATE := $(_THEOS_FALSE)
else
TARGET_INSTALL_REMOTE ?= $(_THEOS_TRUE)
endif

_THEOS_DARWIN_XCRUN_PREFIX := if ($(__executable,xcrun),xcrun -sdk $(_THEOS_TARGET_PLATFORM_NAME),)

ifeq ($(PREFIX),)
	# macOS, iOS
	TARGET_CC ?= $(_THEOS_DARWIN_TOOLCHAIN_PREFIX) $(_THEOS_TARGET_CC)
	TARGET_CXX ?= $(_THEOS_DARWIN_TOOLCHAIN_PREFIX) $(_THEOS_TARGET_CXX)
	TARGET_LD ?= $(_THEOS_DARWIN_TOOLCHAIN_PREFIX) $(_THEOS_TARGET_CXX)
	TARGET_STRIP ?= $(_THEOS_DARWIN_TOOLCHAIN_PREFIX) strip
else
	# Linux, Cygwin
	TARGET_CC ?= $(PREFIX)$(_THEOS_TARGET_CC)
	TARGET_CXX ?= $(PREFIX)$(_THEOS_TARGET_CXX)
	TARGET_LD ?= $(PREFIX)$(_THEOS_TARGET_CXX)
	TARGET_STRIP ?= $(PREFIX)strip
	TARGET_CODESIGN_ALLOCATE ?= $(PREFIX)strip
	TARGET_CODESIGN = $(SDKBINPATH)/ldid
endif

ifeq ($(_THEOS_DARWIN_XCRUN_PREFIX),)
TARGET_CODESIGN_ALLOCATE ?= codesign_allocate
else
TARGET_CODESIGN_ALLOCATE ?= "$(shell xcrun -sdk $(_THEOS_TARGET_PLATFORM_NAME) -find codesign_allocate)"
endif

TARGET_SWIFT ?= swift
TARGET_STRIP_FLAGS ?= -x

ifeq ($(_THEOS_TARGET_PLATFORM_IS_SIMULATOR),$(_THEOS_TRUE))
TARGET_CODESIGN ?= codesign
TARGET_CODESIGN_FLAGS ?= --sign 'iPhone Developer'
else
TARGET_CODESIGN ?= ldid
TARGET_CODESIGN_FLAGS ?= -S
endif

ifeq ($(TARGET_DSYMUTIL),)
ifeq ($(call __executable,dsymutil),$(_THEOS_TRUE))
TARGET_DSYMUTIL = dsymutil
endif
endif

# A version specified as a target argument overrides all previous definitions.
_SDKVERSION := $(or $(__THEOS_TARGET_ARG_$(word 1,$(_THEOS_TARGET_ARG_ORDER))),$(SDKVERSION_$(THEOS_CURRENT_ARCH)),$(SDKVERSION))
_THEOS_TARGET_SDK_VERSION := $(or $(_SDKVERSION),latest)
_THEOS_TARGET_INCLUDE_SDK_VERSION := $(or $(INCLUDE_SDKVERSION),$(INCLUDE_SDKVERSION_$(THEOS_CURRENT_ARCH)),same)

_UNSORTED_SDKS := $(patsubst $(THEOS_SDKS_PATH)/$(_THEOS_TARGET_PLATFORM_SDK_NAME)%.sdk,%,$(wildcard $(THEOS_SDKS_PATH)/$(_THEOS_TARGET_PLATFORM_SDK_NAME)*.sdk))

ifneq ($(THEOS_PLATFORM_SDK_ROOT),)
_XCODE_SDK_DIR := $(THEOS_PLATFORM_SDK_ROOT)/Platforms/$(_THEOS_TARGET_PLATFORM_SDK_NAME).platform/Developer/SDKs
_UNSORTED_SDKS += $(patsubst $(_XCODE_SDK_DIR)/$(_THEOS_TARGET_PLATFORM_SDK_NAME)%.sdk,%,$(wildcard $(_XCODE_SDK_DIR)/$(_THEOS_TARGET_PLATFORM_SDK_NAME)*.sdk))
endif

ifeq ($(words $(_UNSORTED_SDKS)),0)
before-all::
ifeq ($(_XCODE_SDK_DIR),)
	@$(PRINT_FORMAT_ERROR) "You do not have any SDKs in $(THEOS_SDKS_PATH)." >&2; exit 1
else
	@$(PRINT_FORMAT_ERROR) "You do not have any SDKs in $(_XCODE_SDK_DIR) or $(THEOS_SDKS_PATH)." >&2; exit 1
endif
endif

_SORTED_SDKS = $(call __simplify,_SORTED_SDKS,$(shell echo $(_UNSORTED_SDKS) | tr ' ' $$'\n' | sort -t. -k 1,1n -k 2,2n))
_LATEST_SDK = $(call __simplify,_LATEST_SDK,$(lastword $(_SORTED_SDKS)))

ifeq ($(_THEOS_TARGET_SDK_VERSION),latest)
	override _THEOS_TARGET_SDK_VERSION := $(_LATEST_SDK)
endif

ifeq ($(_THEOS_TARGET_INCLUDE_SDK_VERSION),latest)
	override _THEOS_TARGET_INCLUDE_SDK_VERSION := $(_LATEST_SDK)
else ifeq ($(_THEOS_TARGET_INCLUDE_SDK_VERSION),same)
	override _THEOS_TARGET_INCLUDE_SDK_VERSION := $(_THEOS_TARGET_SDK_VERSION)
endif

_THEOS_TARGET_OS_DEPLOYMENT_VERSION := $(or $(__THEOS_TARGET_ARG_$(word 2,$(_THEOS_TARGET_ARG_ORDER))),$(TARGET_OS_DEPLOYMENT_VERSION_$(THEOS_CURRENT_ARCH)),$(TARGET_OS_DEPLOYMENT_VERSION),$(_SDKVERSION),$(_THEOS_TARGET_DEFAULT_OS_DEPLOYMENT_VERSION))

ifeq ($(_THEOS_TARGET_OS_DEPLOYMENT_VERSION),latest)
	override _THEOS_TARGET_OS_DEPLOYMENT_VERSION := $(_LATEST_SDK)
endif
